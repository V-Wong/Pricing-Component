{"version":3,"sources":["components/PricingCard.tsx","components/PricingCardList.tsx","App.js","serviceWorker.js","index.js"],"names":["PricingCard","event","curElement","target","classList","includes","parentNode","toggle","children","card","remove","document","getElementsByClassName","className","onClick","this","selectCard","props","plan","planName","annualPricing","pricing","style","borderBottom","storage","userLimit","sendLimit","React","Component","PricingCardList","plans","map","samplePlans","App","state","marginRight","class","type","setState","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAGqBA,G,8KACRC,GAET,IADA,IAAIC,EAAaD,EAAME,QACf,YAAID,EAAWE,WAAWC,SAAS,iBACzCH,EAAaA,EAAWI,WAE1BJ,EAAWE,UAAUG,OAAO,UALP,oBAMJL,EAAWI,WAAWE,UANlB,IAMrB,2BAAiD,CAAC,IAAzCC,EAAwC,QAC3CA,GAAQP,GACVO,EAAKL,UAAUM,OAAO,WARL,iC,0CAiBrBC,SAASC,uBAAuB,gBAAgB,GAAGR,UAAUG,OAAO,Y,+BAIpE,OACE,yBAAKM,UAAU,eAAeC,QAASC,KAAKC,YAC1C,yBAAKH,UAAU,aAAaE,KAAKE,MAAMC,KAAKC,UAC5C,yBAAKN,UAAU,WAAWE,KAAKE,MAAMG,cAAgB,IAAgC,GAA1BL,KAAKE,MAAMC,KAAKG,QAAgB,IAAMN,KAAKE,MAAMC,KAAKG,SACjH,yBAAKR,UAAU,WACb,yBAAKA,UAAU,SAASS,MAAO,CAACC,aAAc,SAC3CR,KAAKE,MAAMC,KAAKM,SAEnB,yBAAKX,UAAU,SAASS,MAAO,CAACC,aAAc,SAC3CR,KAAKE,MAAMC,KAAKO,WAEnB,yBAAKZ,UAAU,UACZE,KAAKE,MAAMC,KAAKQ,YAGrB,yBAAKb,UAAU,cACb,oD,GAtC+Bc,IAAMC,YCG1BC,E,uKACT,IAAD,OACP,OACE,yBAAKhB,UAAU,qBACZE,KAAKE,MAAMa,MAAMC,KAAI,SAAAb,GAAI,OAAI,kBAAC,EAAD,CAAaA,KAAMA,EAAME,cAAe,EAAKH,MAAMG,wB,GAJ5CO,IAAMC,WCF7CI,G,MAAc,CAClB,CACEb,SAAU,QACVE,QAAS,QACTG,QAAS,iBACTC,UAAW,kBACXC,UAAW,mBAEb,CACEP,SAAU,eACVE,QAAS,QACTG,QAAS,eACTC,UAAW,kBACXC,UAAW,SAEb,CACEP,SAAU,SACVE,QAAS,QACTG,QAAS,eACTC,UAAW,mBACXC,UAAW,sBAIMO,E,kDACnB,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,MAAQ,CACXd,eAAe,GAHA,E,qDAOT,IAAD,OACP,OACE,oCACE,yBAAKP,UAAU,SACb,2DAEF,yBAAKA,UAAU,oBACb,uBAAGS,MAAO,CAACa,YAAa,QAAxB,WACA,2BAAOC,MAAM,UACX,2BAAOC,KAAK,WAAWvB,QAAS,kBAAM,EAAKwB,SAAS,CAAClB,eAAgB,EAAKc,MAAMd,mBAChF,0BAAMgB,MAAM,YAEd,uBAAGd,MAAO,CAACiB,WAAY,QAAvB,aAEF,kBAAC,EAAD,CAAiBT,MAAOE,EAAaZ,cAAeL,KAAKmB,MAAMd,qB,GAtBtCO,IAAMC,WChBnBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASqC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a332b0ad.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./pricing-card.css\";\n\nexport default class PricingCard extends React.Component<any, any> {\n  selectCard(event: any) {\n    let curElement = event.target;\n    while (![...curElement.classList].includes(\"pricing-card\")) {\n      curElement = curElement.parentNode;\n    }\n    curElement.classList.toggle(\"active\");\n    for (let card of curElement.parentNode.children) {\n      if (card != curElement) {\n        card.classList.remove(\"active\");\n      }\n    }\n  }\n\n  componentDidMount() {\n    // This is a hack to get the middle pricing card selected by default.\n    // Figure out a better way to do this.\n\n    document.getElementsByClassName(\"pricing-card\")[1].classList.toggle(\"active\");\n  }\n\n  render() {\n    return (\n      <div className=\"pricing-card\" onClick={this.selectCard}>\n        <div className=\"plan-name\">{this.props.plan.planName}</div>\n        <div className=\"pricing\">{this.props.annualPricing ? \"$\" + this.props.plan.pricing * 12 :  \"$\" + this.props.plan.pricing}</div>\n        <div className=\"details\">\n          <div className=\"detail\" style={{borderBottom: \"none\"}}>\n            {this.props.plan.storage}\n          </div>\n          <div className=\"detail\" style={{borderBottom: \"none\"}}>\n            {this.props.plan.userLimit}\n          </div>\n          <div className=\"detail\">\n            {this.props.plan.sendLimit}\n          </div>\n        </div>\n        <div className=\"learn-more\">\n          <button>LEARN MORE</button>\n        </div>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport PricingCard from \"./PricingCard\";\nimport \"./pricing-card.css\"\n\n\n\nexport default class PricingCardList extends React.Component<any, any> {\n  render() {\n    return (\n      <div className=\"pricing-card-list\">\n        {this.props.plans.map(plan => <PricingCard plan={plan} annualPricing={this.props.annualPricing}/>)}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport PricingCardList from \"./components/PricingCardList\";\nimport \"./app.css\"\n\nconst samplePlans = [\n  {\n    planName: \"Basic\",\n    pricing: \"19.99\",\n    storage: \"500 GB Storage\",\n    userLimit: \"2 Users Allowed\",\n    sendLimit: \"Send Up To 3 GB\",\n  },\n  {\n    planName: \"Professional\",\n    pricing: \"24.99\",\n    storage: \"1 TB Storage\",\n    userLimit: \"5 Users Allowed\",\n    sendLimit: \"10 GB\",\n  },\n  {\n    planName: \"Master\",\n    pricing: \"39.99\",\n    storage: \"2 TB Storage\",\n    userLimit: \"10 Users Allowed\",\n    sendLimit: \"Send Up To 20 GB\",\n  }\n];\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      annualPricing: false\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"title\">\n          <h1>Pricing Component Exercise</h1>\n        </div>\n        <div className=\"switch-container\">\n          <p style={{marginRight: \"1vw\"}}>Monthly</p>\n          <label class=\"switch\">\n            <input type=\"checkbox\" onClick={() => this.setState({annualPricing: !this.state.annualPricing})}/>\n            <span class=\"slider\"></span>\n          </label>\n          <p style={{marginLeft: \"1vw\"}}>Annually</p>\n        </div>\n        <PricingCardList plans={samplePlans} annualPricing={this.state.annualPricing}/>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}